Hello, this is the change log to uh describe details.



Bugs that need to be fixed:
{   (FIXED, CHECK <>) 
    !!!!!!When any entity that has a stop movement collides corner to corner they are permanently stuck and areunable to move in that direction, or in some cases not able to move at all.

    < What the problem was is that player movements were unqiue because they could move in 8 directions compared to the CollsionDetect's method which checks 4.
    So I fixed it by making a player specifc detect, checking what keys are currently being pressed. Meaning it can check up+right at the same time instead of two instances of
    up then right, which might cause a perma collision.

    What causes this issue is if direction/movement is being changed too fast, which happened when I set People.java's drection to be changed every frame.
    Also because of the nature of player the same thing happned above. So if you want to make a thing move really sparatically you need to make a unquie method and use the same
    idea behind the player check in CollsionDetect.java. >
}


{ (NEEDS TO BE FIXED) (PROBLEM IS A MINOR/MEDIUM INCONVIENCE)
    !!!! When you spam two directions and are colliding with a wall, the wall moves. -> When you spam two opposite directions you have a chance to be perma stuck in said entity.
}


Things to add:

        IMPORTANT
            -People vs people collision

            *Teleport if collides with wall? Or just stops and the entites build up?
                As of the notes of 5/25, the current build(?) has people vs wall and player vs wall collisions.

            *Fix/Revamp the collision checks in Game.java
                Done as of 5/25.

            -Timer/Scoring system
                < In this order, because if the projectiles and the more fun aspect of the game CANT be completed in like 2 weeks, then it can just be a
                "How long can you survive dodging people" >

            -Projectiles
            -HP,XP,Abilities
                -For Abilities, do we want them to be active or passive
                    -Meaning does the player dictate when they use them, and what keys or how will they be activated?
            -Collision aginst projectiles
            -Animimations?????

        
        WISHES
            -Settings for screen resolutions, maybe opacity, maybe changing the assets, maybe change keybinds?

            -Fix minor Bugs
            
            -A nice looking title and end screen

            -A personal best local database?

            -Screen for abilites (Nah wait we can do that with the ESC key)

            -Abilites using mouse coords and clicks (Probably easy, but takes time as usual)




    -Fix the calculations for center of screen, when constucting the player's location.

    -Why do we need to have a collisiondection thing for the InvisWall, and how did that fix the problem of Entities intersecting??

    -Entity AI, where they move towards the player.

    -Projectiles.java

    -I guess we remake or add onto the entity class, with a string displaying the type of entity it is because we need to have dmg
    for player vs enemies and player vs projectiles and enemies vs player projectiles. Currently we have no idea else than
    "yes this entity is colliding with this entity".

    -Item.class which will be extending Entity.java, also with that we'll have another collision detect method I guess.

    -Add display of the time currently on the top center of the screen.

    -Title and end screen.

    -When you die, it takes that time and puts it into a txt file or a json file and thats the leaderbaord I guess.


Current date: 5/18/2022

    Changed speeds 0-20 for People.java. (Set to a random speed between 0->5)
    'Entity.Java had it's hitbox creator +2' on all sides so it isn't so cut into the pictures when the collide. (Removed)
    In Game.java actually checked if people obj collided with player obj.
    In Game.java when you press escape it freezes the game and shows hitboxes. (Swapped it for press esc to see skins)
    In CollsionDetect.java fixed a problem where the hitboxes were only being updated to their original positions
        when they collide. (Still having a problem with hitboxes overlapping and freezing both characters)

    Kind of need a timer to fix the problem that people.java is moving too much, thus colliding to far into the player  
        and getting stuck. (Fixed)
    
    Only added InvisWalls.java and initalized the invisible walls on the play screen as "up, down, left, right"

    To make it less annoying, I make it so People.java only changes directions after 5 frames.


Current date: 5/19/2022

    Game.java
        -Finally understood why my ArrayList idea wasn't working. So I added some ArrayLists.
        
    InvisWalls.java
        -Added a static ArrayList

    People.java
        -Same as above


Current date: 5/23/2022

    (New/Changed)Game.java
        -I added a frameCount and a seconds, where it will be used as a score (how long you survived) and as a 
        cooldown system for abilities and movements, so its not 1 movement every frame for the enemy.

        -Changed InvisWalls bounds because I need the player to not move, but the keyinputs would move all other entities.

        -Set player's starting location to center of screen?

    (Changed)People.java
        -Changed count method to determine direction and changed it to Game.frameCount
    
    (Changed)PlayerData.java
        -Made it so when playerMove is used it now returns an int, the int being the speed of the player. If it collides
        with something the speed returned is 0, but the player speed is still 10 to not mess with the collisionDetect.

    (New) Entity.java
        -Added a playerInfluencedMovement Method, where depending on the collision status and the speed of the player it moves
        the inserted entity. This makes the player always be on the center of the screen I guess.
        -Added a type variable, that is this.type set in all other object classes.

    (Changed)InvisWall.java
        -Sort of updaed the x,y,sizex,sizey when constructing a InvisWall

    (Removed) KeyHandler.java
        -I removed he lastPressed due to the fact that I finally understand what keyreleased actually did and its pretty
        cool.

    (Notes)PlayerData, People, Game
        -You have to make the player NOT move but instead move the entities. (Done-ish)


Current date: 5/25/2022

    (Changed)Game.java
        In update() method, changed or fixed collision thing. Where now it somehow allows for the people collision, WHICH, keep in mind I thought would be its own seperate issue.

        Along with that sort of created a new bug?

        Tested the Item.java's rotate for a bit.

    (New) Entity.java
        A new comment rant about a bug that I somehow fixed by smashing my head against this metaphorical rock. 

        Removed a useless variable "Moved"

        Removed hitbox draw during the normal skin draw.

    (Changes)CollsionDetect.java
        Changed a bit of things to understand my code a bit more, and come to the conclusion that if something collides with another thing both things DONT need to have their 
        collides variable = true.

        Why is that the case? I think, no rather I have no idea.
        ^
        Actually its because in Game.java we reset the collides variable to false before checking it against other Entities, therefore if we ran a collision detection (Player vs walls)
        and made both true when colliding. In the next check (walls vs Player), before that check happens the walls.collides = false; already occured, therefore it can be modified to
        make minor FPS improvements?


    (New)Item.java
        Working on a couple of ideas on how to implement something like a sword swing.
    



    GENERAL NOTES AND TODAYS RANT 
        WHY DOES ANY OF MY CODE WORK?
        HOW DOES IT EVEN WORK?
        IT IS SOMEWHAT ORGANIZED I CAN UNDERSTAND TO AN EXTENT WHAT EVERYTHING DOES AND HOW IT COMES TOGETHER ON THE MAIN BOARD, BUT WHY DOES IT WORK?
        I AM LOSING IT.

        Also, I believe that on wall collision we teleport the player to the other side, so it feels infinite and it won't really mess up player movement as you can
        get stuck on the I-walls.
